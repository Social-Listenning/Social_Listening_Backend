// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  FeMale
  Other
}

model Role {
  id              String            @id @default(uuid())
  roleName        String
  level           Int               @default(1)
  User            User[]
  Role_Permission Role_Permission[]
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  userName     String
  fullName     String
  phoneNumber  String?
  refreshToken String?
  password     String
  role         Role           @relation(fields: [roleId], references: [id])
  roleId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deleteAt     Boolean        @default(false)
  isActive     Boolean        @default(false)
  socialGroup  SocialGroup?
  SocialTab    SocialTab[]
  UserInGroup  UserInGroup[]
  File         File[]
  Notification Notification[]

  @@index([email])
  @@index([refreshToken])
}

model Setting {
  id    String @id @default(uuid())
  group String
  key   String
  value String
}

model Permission {
  id              String            @id @default(uuid())
  displayName     String
  permission      String
  screen          String
  deleted         Boolean           @default(false)
  Role_Permission Role_Permission[]
}

model Role_Permission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@id([roleId, permissionId])
}

model Token {
  id    String @id @default(uuid())
  token String
}

model ActivityLog {
  id           Int      @id @default(autoincrement())
  activityType String?
  userName     String
  objName      String?
  objId        String?
  refName      String?
  refId        String?
  dateCreate   DateTime @default(now())
}

model SocialGroup {
  id          String        @id @default(uuid())
  name        String
  manager     User          @relation(fields: [managerId], references: [id])
  managerId   String        @unique
  extendData  String?
  SocialTab   SocialTab[]
  UserInGroup UserInGroup[]
  File        File[]
}

model SocialTab {
  id        String      @id @default(uuid())
  name      String
  group     SocialGroup @relation(fields: [groupId], references: [id])
  groupId   String
  manager   User        @relation(fields: [managerId], references: [id])
  managerId String
  delete    Boolean     @default(false)
}

model UserInGroup {
  user    User        @relation(fields: [userId], references: [id])
  userId  String
  group   SocialGroup @relation(fields: [groupId], references: [id])
  groupId String

  @@id([userId, groupId])
}

model File {
  id        String      @id @default(uuid())
  fileName  String
  fileExt   String
  path      String
  owner     User        @relation(fields: [ownerId], references: [id])
  ownerId   String
  group     SocialGroup @relation(fields: [groupId], references: [id])
  groupId   String
  minetype  String
  createdAt DateTime    @default(now())
}

model Notification {
  id         Int      @id @default(autoincrement())
  title      String?
  body       String?
  maxAttempt Int      @default(5)
  duration   Int      @default(5000)
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  type       String
  status     String   @default("Sent")
  isClick    Boolean  @default(false)
  refType    String?
  refId      String?
  extendData String?
  createdAt  DateTime @default(now())
}

model SocketConnection {
  userId      String @id
  socketToken String
}
